document.addEventListener('DOMContentLoaded', function () {
    const uploadForm = document.getElementById('upload-form');
    const progressContainer = document.getElementById('progress-container');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');

    const activeTaskId = localStorage.getItem('activeTaskId');
    if (activeTaskId) {
        resumeProgress(activeTaskId);
    }

    if (uploadForm) {
        uploadForm.addEventListener('submit', function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            progressContainer.classList.remove('d-none');
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            progressText.textContent = '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...';

            fetch('/documents/upload', { method: 'POST', body: formData })
                .then(response => response.json())
                .then(data => {
                    const taskId = data.taskId;
                    localStorage.setItem('activeTaskId', taskId);
                    progressText.textContent = `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${data.totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü...`;
                    resumeProgress(taskId);
                })
                .catch(() => {
                    progressText.textContent = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞';
                });
        });
    }

    function resumeProgress(taskId) {
        progressContainer.classList.remove('d-none');

        const interval = setInterval(() => {
            fetch(`/documents/progress/${taskId}`)
                .then(r => r.json())
                .then(status => {
                    if (!status) return;

                    const percent = Math.round((status.processedPages / status.totalPages) * 100);
                    progressBar.style.width = percent + '%';
                    progressBar.textContent = percent + '%';
                    progressText.textContent = `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${status.processedPages} –∏–∑ ${status.totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü...`;

                    if (status.finished) {
                        clearInterval(interval);
                        localStorage.removeItem('activeTaskId'); // üßπ –æ—á–∏—â–∞–µ–º taskId
                        progressText.textContent = '‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
                        setTimeout(() => location.reload(), 1500);
                    }
                })
                .catch(() => {
                    clearInterval(interval);
                    progressText.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞';
                });
        }, 1000);
    }
});

function deleteDocument(button) {
    const filename = button.getAttribute('data-filename');
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "${filename}"?`)) return;

    button.disabled = true;
    const originalText = button.textContent;
    button.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> –£–¥–∞–ª—è–µ—Ç—Å—è...';

    fetch(`/documents/delete/${encodeURIComponent(filename)}`, {
        method: 'DELETE'
    })
        .then(response => {
            if (response.ok) {
                const row = button.closest('tr');
                row.style.transition = 'opacity 0.3s';
                row.style.opacity = '0';
                setTimeout(() => row.remove(), 300);
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
                button.disabled = false;
                button.textContent = originalText;
            }
        })
        .catch(() => {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
            button.disabled = false;
            button.textContent = originalText;
        });
}
